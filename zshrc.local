# zsh options
# -----------------------------------------------------------------------------
# Syntax highlighting
source /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
autoload -Uz compinit
compinit
# Auto suggestions
source /usr/share/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh
# Newline after prompt
grml_theme_add_token long-path '%69<..<%~%<< '
zstyle ':prompt:grml:left:setup' items rc change-root user at host long-path vcs newline percent

# FZF config
# -----------------------------------------------------------------------------
# FZF Keybindings
source /usr/share/fzf/key-bindings.zsh
source /usr/share/fzf/completion.zsh
# Use rg instead of the default find command for listing path candidates.
_fzf_compgen_path() {
  rg --files --hidden --smart-case --glob '!.git/*' --glob '!node_modules/*'
}
# Use rg to generate the list for directory completion
_fzf_compgen_dir() {
  rg --files --hidden --smart-case --glob '!.git/*' --glob '!node_modules/*' \
      --null 2>/dev/null | xargs -0 dirname | awk '!h[$0]++'
}
# Using highlight (http://www.andre-simon.de/doku/highlight/en/highlight.html)
export FZF_COMPLETION_OPTS="--preview '(highlight -O ansi -l {} 2> /dev/null \
    || cat {} || tree -C {}) 2> /dev/null | head -200'"
export FZF_DEFAULT_COMMAND="rg --files --hidden --smart-case --glob '!.git/*' \
    --glob '!node_modules/*'"
# To apply the command to CTRL-T as well
export FZF_CTRL_T_OPTS="$FZF_COMPLETION_OPTS"
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
# Preview directories with tree
export FZF_ALT_C_OPTS="--preview 'tree -C {} | head -200'"
export FZF_ALT_C_COMMAND=_fzf_compgen_dir

# Misc
# -----------------------------------------------------------------------------
# search for patterns with ripgrep and open results in the editor
function rg_and_open(){
    FILES=$(rg -l $@)
    if [[ ${#FILES} -gt 0 ]] then
        echo $FILES | xargs -d "\n" $EDITOR
    else
        return 1
    fi
}
# report disk  usage, if file is a folder, then sort files by size
function disk_usage_sorted(){
    if [[ -n $1 ]] then PATH_=$1/ fi
    du -shc $PATH_(.[^.]*|*) | sort -h
}
# search for keyword in pdf's in directory
function search_pdf(){
    if [[ -n $2 ]] then DIR=$2/ fi
    for file in $DIR*.pdf; do pdftotext $file - | grep $1 >> /dev/null && echo $file; done
    return 0
}
# tldr version of man pages
function tldr(){
    curl cheat.sh/$@
}
# list package which owns command
function whoowns(){
  pacman -Qo $@ || { echo "Provided by:" && pacman -F $@ }
}
# if not in vim or ranger show greeter
if [[ -z $VIMRUNTIME ]] && [[ -z $RANGER_LEVEL ]]; then
    neofetch
fi
# Report execution time when a program takes longer than 60s
export REPORTTIME=60

# Aliases
# -----------------------------------------------------------------------------
alias pac='sudo pacman -S' # install
alias paca='yay -Sa' # aur install
alias pacu='sudo pacman -Syu' # update
alias pacau='yay -Syua' # aur update
alias pacr='sudo pacman -Rsn' # remove
alias pacs='pacman -Ss' # search
alias pacas='yay -Ssa' # aur search
alias paci='pacman -Qi' # info
alias paclo='pacman -Qdt' # list orphans
alias pacro='paclo && sudo pacman -Rns $(pacman -Qtdq)' # remove orphans
alias pacc='sudo pacman -Scc' # clean cache
alias pacli='pacman -Q | wc -l' # list user installed packages
alias rgo=rg_and_open
alias calc='ipython --profile=calculate'
alias dus=disk_usage_sorted
alias spdf=search_pdf
alias esavpn='sshuttle --dns -r erebor 130.83.161.128/26 10.0.0.0/8 -x 130.83.161.131/32'
alias htop='htop -t'
